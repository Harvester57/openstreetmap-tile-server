name: Build
on:
  push:
    branches:
    - master
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
    - master

# cancel outdated jobs for the same reference
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE : ${{ github.repository_owner }}/openstreetmap-tile-server
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read

jobs:

  build:
    strategy:
      matrix:
        include:
        - arch    : amd64
          runner  : ubuntu-24.04
        - arch    : arm64
          variant : v8
          runner  : ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
    env:
      VOLUME    : osm-db
      CONTAINER : osm-www
      MOUNT     : /data/database/
      PLATFORM  : linux/${{ matrix.arch }}${{ (matrix.variant != '' && format('/{0}', matrix.variant)) || '' }}
    steps:
    - 
      name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    -
      name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
    -
      name: Environment
      run : |
        echo  IMAGE=$(echo ${{ env.IMAGE }} | tr '[:upper:]' '[:lower:]')  >>$GITHUB_ENV
    -
      name: Docker build
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        pull       : true
        load       : true
        platforms  : ${{ env.PLATFORM }}
        context    : .
        file       : ./Dockerfile
        tags       : ${{ env.IMAGE }}:testbuild-${{ matrix.arch }}
        cache-from : type=gha,scope=${{ github.workflow }}:${{ env.PLATFORM }}
        cache-to   : type=gha,scope=${{ github.workflow }}:${{ env.PLATFORM }},mode=max
    -
      name: Import Luxembourg
      run : |
        docker volume create ${VOLUME}
        docker run --rm --shm-size=4GB -v ${VOLUME}:${MOUNT} -e UPDATES=enabled ${{ env.IMAGE }}:testbuild-${{ matrix.arch }} import
    -
      name: Start server
      run : |
        docker run --shm-size=4GB -v ${VOLUME}:${MOUNT} -e UPDATES=enabled -p 80:80 -d --name ${CONTAINER} ${{ env.IMAGE }}:testbuild-${{ matrix.arch }} run
        sleep 30
        docker logs ${CONTAINER}
    -
      name: Download tiles
      run : |
        curl  http://localhost/tile/0/0/0.png            --fail  -o 000.png
        curl  http://localhost/tile/1/0/0.png            --fail  -o 100.png
        curl  http://localhost/tile/1/0/1.png            --fail  -o 101.png
        curl  http://localhost/tile/1/1/0.png            --fail  -o 110.png
        curl  http://localhost/tile/1/1/1.png            --fail  -o 111.png
        curl  http://localhost/tile/18/138474/85459.png  --fail  -o empty.png
        curl  http://localhost/tile/18/135536/89345.png  --fail  -o example.png
    -
      name: Verify tiles
      run : |
        sha1sum  *.png
        sha1sum  --check  <<EOF
        c226ca747874fb1307eef853feaf9d8db28cef2b *empty.png
        EOF
        tiles=(`ls *.png`)
        for ((i=0; i<${#tiles[@]}; i++)) ; do
          if [ `file  --brief  --mime-type  "${tiles[$i]}"` != 'image/png' ] ; then
            >&2  echo  "ERROR: ${tiles[$i]} is not a image/png file"
            exit 1
          fi
          for ((j=i+1; j<${#tiles[@]}; j++)) ; do
            if ( diff  "${tiles[$i]}"  "${tiles[$j]}" ) ; then
              >&2  echo  "ERROR: ${tiles[$i]} is identical to ${tiles[$j]}"
              exit 2
            fi
          done
        done
    -
      name: Cleanup
      run : |
        docker rm --force --volumes ${CONTAINER}
        docker volume rm --force ${VOLUME}
        docker rmi --force ${{ env.IMAGE }}:testbuild-${{ matrix.arch }}

  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      attestations: write
    needs:
    - build
    if: ${{ github.event_name != 'pull_request' }}
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    -
      name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - 
      name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 #v3.10.0
  
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    -
      name: Login to GHCR
      if: github.event_name != 'pull_request'
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    -
      name: Build and push
      id: build-and-push
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        sbom       : true
        pull       : true
        push       : true
        platforms  : linux/amd64,linux/arm64/v8
        context    : .
        file       : ./Dockerfile
        tags       : ${{ steps.meta.outputs.tags }}
        labels     : ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=${{ github.workflow }}:linux/amd64
          type=gha,scope=${{ github.workflow }}:linux/arm64/v8
        cache-to: type=gha,mode=max

    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

    - name: Attest
      if: github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
      id: attest
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build-and-push.outputs.digest }}
        push-to-registry: true

  scan:
    needs: deploy
    permissions:
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      contents: write # for sbom-action artifact uploads
    runs-on: ubuntu-latest
    steps:
      - 
        name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      -
        name: Build
        id: docker_build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          push: false
          load: true
          tags: localbuild/testimage:latest
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ github.workflow }}:linux/amd64
      -
        name: Generate SBOM and upload dependency results
        uses: anchore/sbom-action@f8bdd1d8ac5e901a77a92f111440fdb1b593736b # v0.20.6
        with:
          image: localbuild/testimage:latest
          artifact-name: "${{ github.event.repository.name }}.cyclonedx-sbom.json"
          output-file: "/tmp/${{ github.event.repository.name }}.cyclonedx-sbom.json"
          dependency-snapshot: true
          format: cyclonedx-json
          upload-artifact: true
      -
        name: Scan SBOM
        uses: anchore/scan-action@f6601287cdb1efc985d6b765bbf99cb4c0ac29d8 # v7.0.0
        id: scan
        with:
          cache-db: true
          fail-build: false
          sbom: "/tmp/${{ github.event.repository.name }}.cyclonedx-sbom.json"
          output-format: sarif
      -
        name: Upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@64d10c13136e1c5bce3e5fbde8d4906eeaafc885 # v3.29.5
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}